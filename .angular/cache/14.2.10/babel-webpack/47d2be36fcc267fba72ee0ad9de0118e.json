{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as moment from 'moment';\nimport { DATE_FORMAT } from '../shared/constants/input.constants';\nimport { SERVER_API_URL_ORDER } from '../app.constants';\nimport { createRequestOption } from '../shared/util/request-util';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CommandeService = /*#__PURE__*/(() => {\n  class CommandeService {\n    constructor(http) {\n      this.http = http;\n      this.resourceUrl = SERVER_API_URL_ORDER + '/api/orders';\n    }\n\n    create(order) {\n      const copy = this.convertDateFromClient(order);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n\n    update(order) {\n      const copy = this.convertDateFromClient(order);\n      return this.http.put(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n\n    convertDateFromClient(order) {\n      const copy = Object.assign({}, order, {\n        date: order.commande.date && order.commande.date.isValid() ? order.commande.date.format(DATE_FORMAT) : undefined\n      });\n      return copy;\n    }\n\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.commande.date = res.body.commande.date ? moment(res.body.commande.date) : undefined;\n      }\n\n      return res;\n    }\n\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(order => {\n          order.commande.date = order.commande.date ? moment(order.commande.date) : undefined;\n        });\n      }\n\n      return res;\n    }\n\n  }\n\n  CommandeService.ɵfac = function CommandeService_Factory(t) {\n    return new (t || CommandeService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CommandeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommandeService,\n    factory: CommandeService.ɵfac,\n    providedIn: 'root'\n  });\n  return CommandeService;\n})();","map":null,"metadata":{},"sourceType":"module"}